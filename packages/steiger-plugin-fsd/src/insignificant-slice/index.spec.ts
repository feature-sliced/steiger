import { expect, it, vi } from 'vitest'
import { join } from 'node:path'

import { compareMessages, joinFromRoot, parseIntoFolder as parseIntoFsdRoot } from '@steiger/toolkit'
import insignificantSlice from './index.js'

vi.mock('tsconfck', async (importOriginal) => {
  return {
    ...(await importOriginal<typeof import('tsconfck')>()),
    parse: vi.fn(() => Promise.resolve({ tsconfig: { compilerOptions: { paths: { '@/*': ['/*'] } } } })),
  }
})

vi.mock('node:fs', async (importOriginal) => {
  const originalFs = await importOriginal<typeof import('fs')>()
  const { createFsMocks } = await import('@steiger/toolkit')

  return createFsMocks(
    {
      '/shared/ui/styles.ts': '',
      '/shared/ui/Button.tsx': 'import styles from "./styles";',
      '/shared/ui/TextField.tsx': 'import styles from "./styles";',
      '/shared/ui/index.ts': '',
      '/entities/user/@x/product.ts': '',
      '/entities/user/ui/UserAvatar.tsx': 'import { Button } from "@/shared/ui"',
      '/entities/user/index.ts': '',
      '/entities/product/ui/ProductCard.tsx': '',
      '/entities/product/ui/CrossReferenceCard.tsx': 'import { UserAvatar } from "@/entities/user/@x/product"',
      '/entities/product/index.ts': '',
      '/features/comments/ui/CommentCard.tsx': '',
      '/features/comments/index.ts': '',
      '/pages/editor/ui/EditorPage.tsx':
        'import { Button } from "@/shared/ui"; import { Editor } from "./Editor"; import { CommentCard } from "@/features/comments"; import { UserAvatar } from "@/entities/user"',
      '/pages/editor/ui/Editor.tsx':
        'import { TextField } from "@/shared/ui"; import { UserAvatar } from "@/entities/user"',
      '/pages/editor/index.ts': '',
      '/pages/settings/ui/SettingsPage.tsx':
        'import { Button } from "@/shared/ui"; import { CommentCard } from "@/features/comments"',
      '/pages/settings/index.ts': '',
    },
    originalFs,
  )
})

it('reports no errors on a project with slices only on the Pages layer', async () => {
  const root = parseIntoFsdRoot(`
    ğŸ“‚ shared
      ğŸ“‚ ui
        ğŸ“„ styles.ts
        ğŸ“„ Button.tsx
        ğŸ“„ TextField.tsx
        ğŸ“„ index.ts
    ğŸ“‚ pages
      ğŸ“‚ editor
        ğŸ“‚ ui
          ğŸ“„ EditorPage.tsx
          ğŸ“„ Editor.tsx
        ğŸ“„ index.ts
  `)

  expect((await insignificantSlice.check(root)).diagnostics).toEqual([])
})

it('reports no errors on a project with no insignificant slices', async () => {
  const root = parseIntoFsdRoot(`
    ğŸ“‚ shared
      ğŸ“‚ ui
        ğŸ“„ styles.ts
        ğŸ“„ Button.tsx
        ğŸ“„ TextField.tsx
        ğŸ“„ index.ts
    ğŸ“‚ features
      ğŸ“‚ comments
        ğŸ“‚ ui
          ğŸ“„ CommentCard.tsx
        ğŸ“„ index.ts
    ğŸ“‚ pages
      ğŸ“‚ editor
        ğŸ“‚ ui
          ğŸ“„ EditorPage.tsx
          ğŸ“„ Editor.tsx
        ğŸ“„ index.ts
      ğŸ“‚ settings
        ğŸ“‚ ui
          ğŸ“„ SettingsPage.tsx
        ğŸ“„ index.ts
  `)

  expect((await insignificantSlice.check(root)).diagnostics).toEqual([])
})

it('reports errors on a project with insignificant slices', async () => {
  const root = parseIntoFsdRoot(`
    ğŸ“‚ shared
      ğŸ“‚ ui
        ğŸ“„ styles.ts
        ğŸ“„ Button.tsx
        ğŸ“„ TextField.tsx
        ğŸ“„ index.ts
    ğŸ“‚ entities
      ğŸ“‚ user
        ğŸ“‚ ui
          ğŸ“„ UserAvatar.tsx
        ğŸ“„ index.ts
      ğŸ“‚ product
        ğŸ“‚ ui
          ğŸ“„ ProductCard.tsx
        ğŸ“„ index.ts
    ğŸ“‚ features
      ğŸ“‚ comments
        ğŸ“‚ ui
          ğŸ“„ CommentCard.tsx
        ğŸ“„ index.ts
    ğŸ“‚ pages
      ğŸ“‚ editor
        ğŸ“‚ ui
          ğŸ“„ EditorPage.tsx
          ğŸ“„ Editor.tsx
        ğŸ“„ index.ts
      ğŸ“‚ settings
        ğŸ“‚ ui
          ğŸ“„ SettingsPage.tsx
        ğŸ“„ index.ts
  `)

  expect((await insignificantSlice.check(root)).diagnostics.sort(compareMessages)).toEqual([
    {
      message: `This slice has no references. Consider removing it.`,
      location: { path: joinFromRoot('entities', 'product') },
    },
    {
      message: `This slice has only one reference in slice "${join('pages', 'editor')}". Consider merging them.`,
      location: { path: joinFromRoot('entities', 'user') },
    },
  ])
})

it('reports errors on a project where the only other reference to a slice is a cross-import', async () => {
  const root = parseIntoFsdRoot(`
    ğŸ“‚ entities
      ğŸ“‚ user
        ğŸ“‚ @x
          ğŸ“„ product.ts
        ğŸ“‚ ui
          ğŸ“„ UserAvatar.tsx
        ğŸ“„ index.ts
      ğŸ“‚ product
        ğŸ“‚ ui
          ğŸ“„ CrossReferenceCard.tsx
        ğŸ“„ index.ts
    ğŸ“‚ pages
      ğŸ“‚ editor
        ğŸ“‚ ui
          ğŸ“„ EditorPage.tsx
          ğŸ“„ Editor.tsx
        ğŸ“„ index.ts
  `)

  expect((await insignificantSlice.check(root)).diagnostics.sort(compareMessages)).toEqual([
    {
      message: `This slice has no references. Consider removing it.`,
      location: { path: joinFromRoot('entities', 'product') },
    },
    {
      message: `This slice has only one reference in slice "${join('pages', 'editor')}". Consider merging them.`,
      location: { path: joinFromRoot('entities', 'user') },
    },
  ])
})
