import { describe, expect, it, vi } from 'vitest'

import { joinFromRoot, parseIntoFolder as parseIntoFsdRoot } from '@steiger/toolkit'
import noPublicApiSidestep from './index.js'

vi.mock('tsconfck', async (importOriginal) => {
  return {
    ...(await importOriginal<typeof import('tsconfck')>()),
    parse: vi.fn(() => Promise.resolve({ tsconfig: { compilerOptions: { paths: { '@/*': ['/*'] } } } })),
  }
})

vi.mock('node:fs', async (importOriginal) => {
  const originalFs = await importOriginal<typeof import('fs')>()
  const { createFsMocks } = await import('@steiger/toolkit')

  return createFsMocks(
    {
      '/shared/i18n/index.ts': '',
      '/shared/i18n/translator.ts': '',
      '/shared/ui/styles.ts': '',
      '/shared/ui/Button.tsx': 'import styles from "./styles";',
      '/shared/ui/TextField.tsx': 'import styles from "./styles";',
      '/shared/ui/index.ts': '',
      '/shared/lib/index.ts': '',
      '/shared/lib/dates.ts': '',
      '/shared/lib/i18n/index.ts': '',
      '/shared/lib/i18n/translator.ts': '',
      '/entities/user/@x/product.ts': '',
      '/entities/user/ui/UserAvatar.tsx': 'import { Button } from "@/shared/ui"',
      '/entities/user/index.ts': '',
      '/entities/product/ui/ProductCard.tsx': 'import { UserAvatar } from "@/entities/user"',
      '/entities/product/ui/CrossReferenceCard.tsx': 'import { UserAvatar } from "@/entities/user/@x/product"',
      '/entities/product/index.ts': '',
      '/features/comments/ui/CommentCard.tsx': 'import { styles } from "@/pages/editor"',
      '/features/comments/index.ts': '',
      '/pages/editor/ui/styles.ts': '',
      '/pages/editor/ui/EditorPage.tsx': 'import { Button } from "@/shared/ui"; import { Editor } from "./Editor"',
      '/pages/editor/ui/Editor.tsx':
        'import { TextField } from "@/shared/ui"; import { ProductCard } from "@/entities/product/ui/ProductCard.tsx"',
      '/pages/editor/ui/SubmitButton.tsx':
        'import { Button } from "@/shared/ui/Button"; import { translator } from "@/shared/i18n/translator"',
      '/pages/editor/index.ts': '',
      '/pages/settings/index.ts': '',
      '/pages/settings/ui/SettingsPage.tsx':
        'import { Button } from "@/shared/ui"; import { dates } from "@/shared/lib/dates"; import { translator } from "@/shared/lib/i18n"',
      '/pages/settings/ui/Password.tsx': 'import { translator } from "@/shared/lib/i18n/translator";',
    },
    originalFs,
  )
})

it('reports no errors on a project without public API sidesteps', async () => {
  const root = parseIntoFsdRoot(`
    ğŸ“‚ shared
      ğŸ“‚ ui
        ğŸ“„ styles.ts
        ğŸ“„ Button.tsx
        ğŸ“„ TextField.tsx
        ğŸ“„ index.ts
    ğŸ“‚ entities
      ğŸ“‚ user
        ğŸ“‚ @x
          ğŸ“„ product.ts
        ğŸ“‚ ui
          ğŸ“„ UserAvatar.tsx
        ğŸ“„ index.ts
      ğŸ“‚ product
        ğŸ“‚ ui
          ğŸ“„ ProductCard.tsx
          ğŸ“„ CrossReferenceCard.tsx
        ğŸ“„ index.ts
  `)

  expect((await noPublicApiSidestep.check(root)).diagnostics).toEqual([])
})

it('reports errors on a project with a public API sidestep on entities', async () => {
  const root = parseIntoFsdRoot(`
    ğŸ“‚ shared
      ğŸ“‚ ui
        ğŸ“„ styles.ts
        ğŸ“„ Button.tsx
        ğŸ“„ TextField.tsx
        ğŸ“„ index.ts
    ğŸ“‚ entities
      ğŸ“‚ user
        ğŸ“‚ ui
          ğŸ“„ UserAvatar.tsx
        ğŸ“„ index.ts
      ğŸ“‚ product
        ğŸ“‚ ui
          ğŸ“„ ProductCard.tsx
        ğŸ“„ index.ts
    ğŸ“‚ pages
      ğŸ“‚ editor
        ğŸ“‚ ui
          ğŸ“„ EditorPage.tsx
          ğŸ“„ Editor.tsx
        ğŸ“„ index.ts
  `)

  expect((await noPublicApiSidestep.check(root)).diagnostics).toEqual([
    {
      message: `Forbidden sidestep of public API when importing from "@/entities/product/ui/ProductCard.tsx".`,
      location: { path: joinFromRoot('pages', 'editor', 'ui', 'Editor.tsx') },
    },
  ])
})

it('reports errors on a project with a public API sidestep on shared', async () => {
  const root = parseIntoFsdRoot(`
    ğŸ“‚ shared
      ğŸ“‚ ui
        ğŸ“„ styles.ts
        ğŸ“„ Button.tsx
        ğŸ“„ TextField.tsx
        ğŸ“„ index.ts
      ğŸ“‚ i18n
        ğŸ“„ index.ts
        ğŸ“„ translator.ts
    ğŸ“‚ pages
      ğŸ“‚ editor
        ğŸ“‚ ui
          ğŸ“„ EditorPage.tsx
          ğŸ“„ SubmitButton.tsx
        ğŸ“„ index.ts
  `)

  expect((await noPublicApiSidestep.check(root)).diagnostics).toEqual([
    {
      message: `Forbidden sidestep of public API when importing from "@/shared/i18n/translator".`,
      location: { path: joinFromRoot('pages', 'editor', 'ui', 'SubmitButton.tsx') },
    },
  ])
})

describe('specifics of shared/lib and shared/ui', () => {
  it('knows that imports from shared/lib must be one layer deeper', async () => {
    const root = parseIntoFsdRoot(`
      ğŸ“‚ shared
        ğŸ“‚ ui
          ğŸ“„ styles.ts
          ğŸ“„ Button.tsx
          ğŸ“„ TextField.tsx
          ğŸ“„ index.ts
        ğŸ“‚ lib
          ğŸ“„ dates.ts
          ğŸ“‚ i18n
            ğŸ“„ index.ts
            ğŸ“„ translator.ts
      ğŸ“‚ pages
        ğŸ“‚ settings
          ğŸ“‚ ui
            ğŸ“„ SettingsPage.tsx
          ğŸ“„ index.ts
    `)

    expect((await noPublicApiSidestep.check(root)).diagnostics).toEqual([])
  })

  it('still does not allow sidestepping the index of a single library', async () => {
    const root = parseIntoFsdRoot(`
      ğŸ“‚ shared
        ğŸ“‚ lib
          ğŸ“„ dates.ts
          ğŸ“‚ i18n
            ğŸ“„ index.ts
            ğŸ“„ translator.ts
      ğŸ“‚ pages
        ğŸ“‚ settings
          ğŸ“‚ ui
            ğŸ“„ SettingsPage.tsx
            ğŸ“„ Password.tsx
          ğŸ“„ index.ts
    `)

    expect((await noPublicApiSidestep.check(root)).diagnostics).toEqual([
      {
        message: `Forbidden sidestep of public API when importing from "@/shared/lib/i18n/translator".`,
        location: { path: joinFromRoot('pages', 'settings', 'ui', 'Password.tsx') },
      },
    ])
  })
})
