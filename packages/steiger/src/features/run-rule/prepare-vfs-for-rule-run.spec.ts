import { prepareVfsForRuleRun } from './prepare-vfs-for-rule-run'

import { describe, it, expect } from 'vitest'
import { joinFromRoot, parseIntoFsdRoot } from '../../_lib/prepare-test'
import { GlobGroupWithSeverity } from '../../models/config'

describe('prepareVfsForRuleRun', () => {
  it('should return vfs without off nodes', () => {
    const vfs = parseIntoFsdRoot(
      `
      ğŸ“‚ shared
        ğŸ“‚ ui
          ğŸ“„ Button.ts
          ğŸ“„ Button.spec.ts
          ğŸ“„ Input.ts
          ğŸ“„ Input.spec.ts
          ğŸ“„ index.ts
        ğŸ“‚ lib
          ğŸ“„ get-query-params.ts
          ğŸ“„ get-query-params.spec.ts
          ğŸ“„ device-detection.ts
          ğŸ“„ device-detection.spec.ts
          ğŸ“„ index.ts
      ğŸ“‚ entities
        ğŸ“‚ user
          ğŸ“‚ ui
            ğŸ“„ UserAvatar.ts
            ğŸ“„ UserAvatar.spec.ts
          ğŸ“„ Input.ts
      ğŸ“‚ pages
        ğŸ“‚ profile
          ğŸ“„ index.ts
        ğŸ“‚ main
          ğŸ“„ index.ts
    `,
      joinFromRoot('src'),
    )

    const expectedVfs = parseIntoFsdRoot(
      `
      ğŸ“‚ shared
        ğŸ“‚ ui
          ğŸ“„ Button.ts
          ğŸ“„ Button.spec.ts
          ğŸ“„ Input.ts
          ğŸ“„ Input.spec.ts
          ğŸ“„ index.ts
        ğŸ“‚ lib
          ğŸ“„ get-query-params.ts
          ğŸ“„ get-query-params.spec.ts
          ğŸ“„ device-detection.ts
          ğŸ“„ device-detection.spec.ts
          ğŸ“„ index.ts
      ğŸ“‚ entities
        ğŸ“‚ user
          ğŸ“‚ ui
            ğŸ“„ UserAvatar.ts
            ğŸ“„ UserAvatar.spec.ts
          ğŸ“„ Input.ts
    `,
      joinFromRoot('src'),
    )

    const globGroups = [
      {
        severity: 'error',
      },
      {
        files: ['/src/pages/**'],
        severity: 'off',
      },
      {
        files: ['**/ui/**'],
        severity: 'warn',
      },
    ] as Array<GlobGroupWithSeverity>

    expect(prepareVfsForRuleRun(vfs, globGroups)).toEqual(expectedVfs)
  })
})
