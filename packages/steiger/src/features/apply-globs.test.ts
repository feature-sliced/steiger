import { expect, it, describe } from 'vitest'

import applyGlobs from './apply-globs'
import { joinFromRoot, parseIntoFsdRoot } from '../_lib/prepare-test'

describe('applyGlobs', () => {
  it('should return the passed folder if no globs are provided', () => {
    const root = parseIntoFsdRoot(
      `
      ğŸ“‚ shared
        ğŸ“‚ ui
          ğŸ“„ styles.css
          ğŸ“„ Button.tsx
          ğŸ“„ TextField.tsx
          ğŸ“„ index.ts
    `,
      joinFromRoot('src'),
    )

    expect(applyGlobs(root, {})).toEqual(root)
    expect(
      applyGlobs(root, {
        inclusions: [],
        exclusions: [],
      }),
    ).toEqual(root)
  })

  it('should return the picked folder if a specific folder is passed to inclusion patterns', () => {
    const root = parseIntoFsdRoot(
      `
      ğŸ“‚ shared
        ğŸ“‚ ui
          ğŸ“„ styles.css
          ğŸ“„ Button.tsx
          ğŸ“„ TextField.tsx
          ğŸ“„ index.ts
      ğŸ“‚ entities
        ğŸ“‚ user
          ğŸ“„ UserAvatar.tsx
        ğŸ“‚ product
          ğŸ“„ ProductCard.tsx
    `,
      joinFromRoot('src'),
    )

    const expected = parseIntoFsdRoot(
      `
      ğŸ“‚ shared
        ğŸ“‚ ui
          ğŸ“„ styles.css
          ğŸ“„ Button.tsx
          ğŸ“„ TextField.tsx
          ğŸ“„ index.ts
    `,
      joinFromRoot('src'),
    )

    const actual = applyGlobs(root, {
      inclusions: ['/src/shared/**'],
      exclusions: [],
    })

    expect(actual).toEqual(expected)
  })

  it('should return all __mock__ folders if the inclusion pattern says to include them all', () => {
    const root = parseIntoFsdRoot(
      `
      ğŸ“‚ shared
        ğŸ“‚ ui
          ğŸ“‚ __mocks__
            ğŸ“„ Button.tsx
          ğŸ“„ styles.css
          ğŸ“„ Button.tsx
          ğŸ“„ TextField.tsx
          ğŸ“„ index.ts
      ğŸ“‚ entities
        ğŸ“‚ user
          ğŸ“‚ __mocks__
            ğŸ“„ UserAvatar.tsx
          ğŸ“„ UserAvatar.tsx
        ğŸ“‚ product
          ğŸ“„ ProductCard.tsx
    `,
      joinFromRoot('src'),
    )

    const expected = parseIntoFsdRoot(
      `
       ğŸ“‚ shared
         ğŸ“‚ ui
           ğŸ“‚ __mocks__
             ğŸ“„ Button.tsx
       ğŸ“‚ entities
         ğŸ“‚ user
           ğŸ“‚ __mocks__
             ğŸ“„ UserAvatar.tsx
    `,
      joinFromRoot('src'),
    )

    const actual = applyGlobs(root, {
      inclusions: ['**/__mocks__/**'],
      exclusions: [],
    })

    expect(actual).toEqual(expected)
  })

  it('should return files picked by extension if the inclusion patterns pick by extension', () => {
    const root = parseIntoFsdRoot(
      `
      ğŸ“‚ shared
        ğŸ“‚ ui
          ğŸ“„ styles.css
          ğŸ“„ Button.tsx
          ğŸ“„ TextField.tsx
          ğŸ“„ index.ts
      ğŸ“‚ entities
        ğŸ“‚ user
          ğŸ“„ styles.css
          ğŸ“„ UserAvatar.tsx
        ğŸ“‚ product
          ğŸ“„ ProductCard.tsx
    `,
      joinFromRoot('src'),
    )

    const expected = parseIntoFsdRoot(
      `
       ğŸ“‚ shared
         ğŸ“‚ ui
           ğŸ“„ styles.css
       ğŸ“‚ entities
         ğŸ“‚ user
           ğŸ“„ styles.css
    `,
      joinFromRoot('src'),
    )

    const actual = applyGlobs(root, {
      inclusions: ['**/*.css'],
      exclusions: [],
    })

    expect(actual).toEqual(expected)
  })

  it('should return a specific single file if the inclusion pattern pick that only file', () => {
    const root = parseIntoFsdRoot(
      `
      ğŸ“‚ shared
        ğŸ“‚ ui
          ğŸ“„ styles.css
          ğŸ“„ Button.tsx
          ğŸ“„ TextField.tsx
          ğŸ“„ index.ts
      ğŸ“‚ entities
        ğŸ“‚ user
          ğŸ“„ styles.css
          ğŸ“„ UserAvatar.tsx
        ğŸ“‚ product
          ğŸ“„ ProductCard.tsx
    `,
      joinFromRoot('src'),
    )

    const expected = parseIntoFsdRoot(
      `
      ğŸ“‚ shared
        ğŸ“‚ ui
          ğŸ“„ TextField.tsx
    `,
      joinFromRoot('src'),
    )

    const actual = applyGlobs(root, {
      inclusions: ['/src/shared/ui/TextField.tsx'],
      exclusions: [],
    })

    expect(actual).toEqual(expected)
  })

  it('should correctly handle negations in exclusion patterns', () => {
    const root = parseIntoFsdRoot(
      `
      ğŸ“‚ shared
        ğŸ“‚ ui
          ğŸ“„ styles.css
          ğŸ“„ Button.tsx
          ğŸ“„ TextField.tsx
          ğŸ“„ index.ts
        ğŸ“‚ config
          ğŸ“„ eslint.config.js
          ğŸ“„ styling.config.js
      ğŸ“‚ entities
        ğŸ“‚ user
          ğŸ“„ styles.css
          ğŸ“„ UserAvatar.tsx
        ğŸ“‚ product
          ğŸ“„ ProductCard.tsx
    `,
      joinFromRoot('src'),
    )

    const expected = parseIntoFsdRoot(
      `
      ğŸ“‚ shared
        ğŸ“‚ ui
          ğŸ“„ styles.css
          ğŸ“„ Button.tsx
          ğŸ“„ TextField.tsx
          ğŸ“„ index.ts
        ğŸ“‚ config
          ğŸ“„ eslint.config.js
      ğŸ“‚ entities
        ğŸ“‚ user
          ğŸ“„ styles.css
          ğŸ“„ UserAvatar.tsx
        ğŸ“‚ product
          ğŸ“„ ProductCard.tsx
    `,
      joinFromRoot('src'),
    )

    const actual = applyGlobs(root, {
      exclusions: ['**/*.config.js', '!**/eslint.config.js'],
    })

    expect(actual).toEqual(expected)
  })

  it('should return the fs tree without all __mock__ folders if the exclusion pattern says to ignore them all', () => {
    const root = parseIntoFsdRoot(
      `
      ğŸ“‚ shared
        ğŸ“‚ ui
          ğŸ“‚ __mocks__
            ğŸ“„ Button.tsx
          ğŸ“„ styles.css
          ğŸ“„ Button.tsx
          ğŸ“„ TextField.tsx
          ğŸ“„ index.ts
      ğŸ“‚ entities
        ğŸ“‚ user
          ğŸ“‚ __mocks__
            ğŸ“„ UserAvatar.tsx
          ğŸ“„ UserAvatar.tsx
        ğŸ“‚ product
          ğŸ“„ ProductCard.tsx
    `,
      joinFromRoot('src'),
    )

    const expected = parseIntoFsdRoot(
      `
       ğŸ“‚ shared
         ğŸ“‚ ui
           ğŸ“„ styles.css
           ğŸ“„ Button.tsx
           ğŸ“„ TextField.tsx
           ğŸ“„ index.ts
       ğŸ“‚ entities
         ğŸ“‚ user
           ğŸ“„ UserAvatar.tsx
         ğŸ“‚ product
           ğŸ“„ ProductCard.tsx
    `,
      joinFromRoot('src'),
    )

    const actual = applyGlobs(root, {
      inclusions: [],
      exclusions: ['**/__mocks__/**'],
    })

    expect(actual).toEqual(expected)
  })

  it('should exclude files with specific extension if exclusion pattern is set up accordingly', () => {
    const root = parseIntoFsdRoot(
      `
      ğŸ“‚ shared
        ğŸ“‚ lib
          ğŸ“„ get-query-params.ts
          ğŸ“„ get-query-params.test.ts
        ğŸ“‚ ui
          ğŸ“„ styles.css
          ğŸ“„ Button.tsx
          ğŸ“„ Button.test.tsx
          ğŸ“„ TextField.tsx
          ğŸ“„ TextField.test.tsx
          ğŸ“„ index.ts
      ğŸ“‚ entities
        ğŸ“‚ user
          ğŸ“„ styles.css
          ğŸ“„ UserAvatar.tsx
          ğŸ“„ UserAvatar.test.tsx
        ğŸ“‚ product
          ğŸ“„ ProductCard.tsx
    `,
      joinFromRoot('src'),
    )

    const expected = parseIntoFsdRoot(
      `
      ğŸ“‚ shared
        ğŸ“‚ lib
          ğŸ“„ get-query-params.ts
        ğŸ“‚ ui
          ğŸ“„ styles.css
          ğŸ“„ Button.tsx
          ğŸ“„ TextField.tsx
          ğŸ“„ index.ts
    `,
      joinFromRoot('src'),
    )

    const actual = applyGlobs(root, {
      inclusions: ['/src/shared/**'],
      exclusions: ['**/*.test.{tsx,ts}'],
    })

    expect(actual).toEqual(expected)
  })
})
