import { describe, expect, it } from 'vitest'

import { applyExclusion } from './apply-exclusion'
import { not } from './not'
import { joinFromRoot, parseIntoFsdRoot } from '../../_lib/prepare-test'

describe('applyExclusion', () => {
  it('should apply exclusions with a normal glob group', () => {
    const vfs = parseIntoFsdRoot(
      `
      ğŸ“‚ shared
        ğŸ“‚ ui
          ğŸ“„ index.ts
          ğŸ“„ Button.tsx
        ğŸ“‚ lib
          ğŸ“„ device-detect.ts
          ğŸ“„ get-query-params.ts
          ğŸ“„ index.ts
      ğŸ“‚ entities
        ğŸ“‚ user
          ğŸ“‚ ui
            ğŸ“„ UserAvatar.tsx
            ğŸ“„ index.ts
          ğŸ“„ index.ts
        ğŸ“‚ post
          ğŸ“‚ ui
            ğŸ“„ index.ts
            ğŸ“„ PostList.tsx
          ğŸ“„ index.ts
      `,
      joinFromRoot('src'),
    )

    const expectedVfs = parseIntoFsdRoot(
      `
      ğŸ“‚ shared
        ğŸ“‚ lib
          ğŸ“„ device-detect.ts
          ğŸ“„ get-query-params.ts
          ğŸ“„ index.ts
      ğŸ“‚ entities
        ğŸ“‚ user
          ğŸ“„ index.ts
        ğŸ“‚ post
          ğŸ“„ index.ts
        `,
      joinFromRoot('src'),
    )

    const globs = [
      {
        files: ['/src/shared/**', '/src/entities/**'],
        ignores: ['**/ui/**'],
      },
    ]

    expect(applyExclusion(vfs, globs)).toEqual(expectedVfs)
  })

  it('should correctly apply exclusions with an inverted glob group', () => {
    const vfs = parseIntoFsdRoot(
      `
      ğŸ“‚ shared
        ğŸ“‚ ui
          ğŸ“„ index.ts
          ğŸ“„ Button.tsx
        ğŸ“‚ lib
          ğŸ“„ device-detect.ts
          ğŸ“„ get-query-params.ts
          ğŸ“„ index.ts
      ğŸ“‚ entities
        ğŸ“‚ user
          ğŸ“‚ ui
            ğŸ“„ UserAvatar.tsx
            ğŸ“„ index.ts
          ğŸ“„ index.ts
        ğŸ“‚ post
          ğŸ“‚ ui
            ğŸ“„ index.ts
            ğŸ“„ PostList.tsx
          ğŸ“„ index.ts
      `,
      joinFromRoot('src'),
    )

    const expectedVfs = parseIntoFsdRoot(
      `
      ğŸ“‚ shared
        ğŸ“‚ lib
          ğŸ“„ device-detect.ts
          ğŸ“„ index.ts`,
      joinFromRoot('src'),
    )

    const globs = [
      {
        files: ['/src/shared/**', '/src/entities/**'],
        ignores: ['**/ui/**'],
      },
      not({
        files: ['/src/entities/**', '/src/shared/lib/get-query-params.ts'],
      }),
    ]

    expect(applyExclusion(vfs, globs)).toEqual(expectedVfs)
  })

  it('should correctly apply exclusions with several normal and inverted glob groups', () => {
    const vfs = parseIntoFsdRoot(
      `
      ğŸ“‚ shared
        ğŸ“‚ ui
          ğŸ“„ index.ts
          ğŸ“„ Button.tsx
        ğŸ“‚ lib
          ğŸ“„ device-detect.ts
          ğŸ“„ get-query-params.ts
          ğŸ“„ index.ts
      ğŸ“‚ entities
        ğŸ“‚ user
          ğŸ“‚ ui
            ğŸ“„ UserAvatar.tsx
            ğŸ“„ index.ts
          ğŸ“„ index.ts
        ğŸ“‚ post
          ğŸ“‚ ui
            ğŸ“„ index.ts
            ğŸ“„ PostList.tsx
          ğŸ“„ index.ts
      ğŸ“‚ pages
        ğŸ“‚ main
          ğŸ“„ index.ts
        ğŸ“‚ account
          ğŸ“„ index.ts
      `,
      joinFromRoot('src'),
    )

    const expectedVfs = parseIntoFsdRoot(
      `
      ğŸ“‚ shared
        ğŸ“‚ lib
          ğŸ“„ device-detect.ts
          ğŸ“„ index.ts
      ğŸ“‚ pages
        ğŸ“‚ main
          ğŸ“„ index.ts`,
      joinFromRoot('src'),
    )

    const globs = [
      {
        files: ['/src/shared/**', '/src/entities/**'],
        ignores: ['**/ui/**'],
      },
      not({
        files: ['/src/entities/**', '/src/shared/lib/get-query-params.ts'],
      }),
      {
        files: ['/src/pages/**'],
      },
      not({
        files: ['/src/pages/account/**'],
      }),
    ]

    expect(applyExclusion(vfs, globs)).toEqual(expectedVfs)
  })

  it('should correctly apply exclusions for an empty glob group', () => {
    const globs = [not({}), { files: ['/src/shared/ui/Button.ts'], ignores: [] }]

    const vfs = parseIntoFsdRoot(
      `
      ğŸ“‚ shared
        ğŸ“‚ ui
          ğŸ“„ Button.ts
          ğŸ“„ Button.spec.ts
          ğŸ“„ Input.ts
          ğŸ“„ Input.spec.ts
          ğŸ“„ index.ts
        ğŸ“‚ lib
          ğŸ“„ get-query-params.ts
          ğŸ“„ get-query-params.spec.ts
          ğŸ“„ device-detection.ts
          ğŸ“„ device-detection.spec.ts
          ğŸ“„ index.ts
      ğŸ“‚ entities
        ğŸ“‚ user
          ğŸ“‚ ui
            ğŸ“„ UserAvatar.ts
            ğŸ“„ UserAvatar.spec.ts
          ğŸ“„ Input.ts
      ğŸ“‚ pages
        ğŸ“‚ profile
          ğŸ“„ index.ts
        ğŸ“‚ main
          ğŸ“„ index.ts
      `,
      joinFromRoot('src'),
    )

    const expectedVfs = parseIntoFsdRoot(
      `
      ğŸ“‚ shared
        ğŸ“‚ ui
          ğŸ“„ Button.ts
      `,
      joinFromRoot('src'),
    )

    expect(applyExclusion(vfs, globs)).toEqual(expectedVfs)
  })

  it('should correctly apply exclusions for brace sets', () => {
    const globs = [{}, not({ files: ['**/*.spec.{ts,tsx}'] })]

    const vfs = parseIntoFsdRoot(
      `
      ğŸ“‚ shared
        ğŸ“‚ ui
          ğŸ“„ Button.ts
          ğŸ“„ Button.spec.tsx
          ğŸ“„ Input.ts
          ğŸ“„ Input.spec.tsx
          ğŸ“„ index.ts
        ğŸ“‚ lib
          ğŸ“„ get-query-params.ts
          ğŸ“„ get-query-params.spec.ts
          ğŸ“„ device-detection.ts
          ğŸ“„ device-detection.spec.ts
          ğŸ“„ index.ts
      ğŸ“‚ entities
        ğŸ“‚ user
          ğŸ“‚ ui
            ğŸ“„ UserAvatar.ts
            ğŸ“„ UserAvatar.spec.tsx
          ğŸ“„ Input.ts
      ğŸ“‚ pages
        ğŸ“‚ profile
          ğŸ“„ index.ts
        ğŸ“‚ main
          ğŸ“„ index.ts
      `,
      joinFromRoot('src'),
    )

    const expectedVfs = parseIntoFsdRoot(
      `
      ğŸ“‚ shared
        ğŸ“‚ ui
          ğŸ“„ Button.ts
          ğŸ“„ Input.ts
          ğŸ“„ index.ts
        ğŸ“‚ lib
          ğŸ“„ get-query-params.ts
          ğŸ“„ device-detection.ts
          ğŸ“„ index.ts
      ğŸ“‚ entities
        ğŸ“‚ user
          ğŸ“‚ ui
            ğŸ“„ UserAvatar.ts
          ğŸ“„ Input.ts
      ğŸ“‚ pages
        ğŸ“‚ profile
          ğŸ“„ index.ts
        ğŸ“‚ main
          ğŸ“„ index.ts
      `,
      joinFromRoot('src'),
    )

    expect(applyExclusion(vfs, globs)).toEqual(expectedVfs)
  })
})
